#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FeelOfTravel.SqlDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FeelOfTravel")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttbAboutPage(tbAboutPage instance);
    partial void UpdatetbAboutPage(tbAboutPage instance);
    partial void DeletetbAboutPage(tbAboutPage instance);
    partial void InserttbOfferType(tbOfferType instance);
    partial void UpdatetbOfferType(tbOfferType instance);
    partial void DeletetbOfferType(tbOfferType instance);
    partial void InserttbContactsPage(tbContactsPage instance);
    partial void UpdatetbContactsPage(tbContactsPage instance);
    partial void DeletetbContactsPage(tbContactsPage instance);
    partial void InserttbInformationCategory(tbInformationCategory instance);
    partial void UpdatetbInformationCategory(tbInformationCategory instance);
    partial void DeletetbInformationCategory(tbInformationCategory instance);
    partial void InserttbOffer(tbOffer instance);
    partial void UpdatetbOffer(tbOffer instance);
    partial void DeletetbOffer(tbOffer instance);
    partial void InserttbCoreArticleData(tbCoreArticleData instance);
    partial void UpdatetbCoreArticleData(tbCoreArticleData instance);
    partial void DeletetbCoreArticleData(tbCoreArticleData instance);
    #endregion
		
		public DbDataContext() : 
				base(global::FeelOfTravel.SqlDataAccess.Properties.Settings.Default.FeelOfTravelConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbAboutPage> tbAboutPages
		{
			get
			{
				return this.GetTable<tbAboutPage>();
			}
		}
		
		public System.Data.Linq.Table<tbOfferType> tbOfferTypes
		{
			get
			{
				return this.GetTable<tbOfferType>();
			}
		}
		
		public System.Data.Linq.Table<tbContactsPage> tbContactsPages
		{
			get
			{
				return this.GetTable<tbContactsPage>();
			}
		}
		
		public System.Data.Linq.Table<tbInformationCategory> tbInformationCategories
		{
			get
			{
				return this.GetTable<tbInformationCategory>();
			}
		}
		
		public System.Data.Linq.Table<tbOffer> tbOffers
		{
			get
			{
				return this.GetTable<tbOffer>();
			}
		}
		
		public System.Data.Linq.Table<tbCoreArticleData> tbCoreArticleDatas
		{
			get
			{
				return this.GetTable<tbCoreArticleData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbAboutPage")]
	public partial class tbAboutPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _entryId;
		
		private string _text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentryIdChanging(int value);
    partial void OnentryIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public tbAboutPage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbOfferTypes")]
	public partial class tbOfferType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<tbOffer> _tbOffers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public tbOfferType()
		{
			this._tbOffers = new EntitySet<tbOffer>(new Action<tbOffer>(this.attach_tbOffers), new Action<tbOffer>(this.detach_tbOffers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbOfferType_tbOffer", Storage="_tbOffers", ThisKey="id", OtherKey="typeId")]
		public EntitySet<tbOffer> tbOffers
		{
			get
			{
				return this._tbOffers;
			}
			set
			{
				this._tbOffers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbOffers(tbOffer entity)
		{
			this.SendPropertyChanging();
			entity.tbOfferType = this;
		}
		
		private void detach_tbOffers(tbOffer entity)
		{
			this.SendPropertyChanging();
			entity.tbOfferType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbContactsPage")]
	public partial class tbContactsPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _entryId;
		
		private string _text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentryIdChanging(int value);
    partial void OnentryIdChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public tbContactsPage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbInformationCategories")]
	public partial class tbInformationCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<tbCoreArticleData> _tbCoreArticleDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public tbInformationCategory()
		{
			this._tbCoreArticleDatas = new EntitySet<tbCoreArticleData>(new Action<tbCoreArticleData>(this.attach_tbCoreArticleDatas), new Action<tbCoreArticleData>(this.detach_tbCoreArticleDatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbInformationCategory_tbCoreArticleData", Storage="_tbCoreArticleDatas", ThisKey="id", OtherKey="categoryId")]
		public EntitySet<tbCoreArticleData> tbCoreArticleDatas
		{
			get
			{
				return this._tbCoreArticleDatas;
			}
			set
			{
				this._tbCoreArticleDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbCoreArticleDatas(tbCoreArticleData entity)
		{
			this.SendPropertyChanging();
			entity.tbInformationCategory = this;
		}
		
		private void detach_tbCoreArticleDatas(tbCoreArticleData entity)
		{
			this.SendPropertyChanging();
			entity.tbInformationCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbOffers")]
	public partial class tbOffer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _coreArticleDataId;
		
		private System.Nullable<double> _price;
		
		private int _typeId;
		
		private EntityRef<tbOfferType> _tbOfferType;
		
		private EntityRef<tbCoreArticleData> _tbCoreArticleData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncoreArticleDataIdChanging(int value);
    partial void OncoreArticleDataIdChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OntypeIdChanging(int value);
    partial void OntypeIdChanged();
    #endregion
		
		public tbOffer()
		{
			this._tbOfferType = default(EntityRef<tbOfferType>);
			this._tbCoreArticleData = default(EntityRef<tbCoreArticleData>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coreArticleDataId", DbType="Int NOT NULL")]
		public int coreArticleDataId
		{
			get
			{
				return this._coreArticleDataId;
			}
			set
			{
				if ((this._coreArticleDataId != value))
				{
					if (this._tbCoreArticleData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncoreArticleDataIdChanging(value);
					this.SendPropertyChanging();
					this._coreArticleDataId = value;
					this.SendPropertyChanged("coreArticleDataId");
					this.OncoreArticleDataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeId", DbType="Int NOT NULL")]
		public int typeId
		{
			get
			{
				return this._typeId;
			}
			set
			{
				if ((this._typeId != value))
				{
					if (this._tbOfferType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIdChanging(value);
					this.SendPropertyChanging();
					this._typeId = value;
					this.SendPropertyChanged("typeId");
					this.OntypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbOfferType_tbOffer", Storage="_tbOfferType", ThisKey="typeId", OtherKey="id", IsForeignKey=true)]
		public tbOfferType tbOfferType
		{
			get
			{
				return this._tbOfferType.Entity;
			}
			set
			{
				tbOfferType previousValue = this._tbOfferType.Entity;
				if (((previousValue != value) 
							|| (this._tbOfferType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbOfferType.Entity = null;
						previousValue.tbOffers.Remove(this);
					}
					this._tbOfferType.Entity = value;
					if ((value != null))
					{
						value.tbOffers.Add(this);
						this._typeId = value.id;
					}
					else
					{
						this._typeId = default(int);
					}
					this.SendPropertyChanged("tbOfferType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCoreArticleData_tbOffer", Storage="_tbCoreArticleData", ThisKey="coreArticleDataId", OtherKey="id", IsForeignKey=true)]
		public tbCoreArticleData tbCoreArticleData
		{
			get
			{
				return this._tbCoreArticleData.Entity;
			}
			set
			{
				tbCoreArticleData previousValue = this._tbCoreArticleData.Entity;
				if (((previousValue != value) 
							|| (this._tbCoreArticleData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbCoreArticleData.Entity = null;
						previousValue.tbOffers.Remove(this);
					}
					this._tbCoreArticleData.Entity = value;
					if ((value != null))
					{
						value.tbOffers.Add(this);
						this._coreArticleDataId = value.id;
					}
					else
					{
						this._coreArticleDataId = default(int);
					}
					this.SendPropertyChanged("tbCoreArticleData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbCoreArticleData")]
	public partial class tbCoreArticleData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _categoryId;
		
		private string _header;
		
		private string _text;
		
		private string _imageUrl;
		
		private System.DateTime _publishDate;
		
		private EntitySet<tbOffer> _tbOffers;
		
		private EntityRef<tbInformationCategory> _tbInformationCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncategoryIdChanging(int value);
    partial void OncategoryIdChanged();
    partial void OnheaderChanging(string value);
    partial void OnheaderChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnimageUrlChanging(string value);
    partial void OnimageUrlChanged();
    partial void OnpublishDateChanging(System.DateTime value);
    partial void OnpublishDateChanged();
    #endregion
		
		public tbCoreArticleData()
		{
			this._tbOffers = new EntitySet<tbOffer>(new Action<tbOffer>(this.attach_tbOffers), new Action<tbOffer>(this.detach_tbOffers));
			this._tbInformationCategory = default(EntityRef<tbInformationCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="Int NOT NULL")]
		public int categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					if (this._tbInformationCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_header", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string header
		{
			get
			{
				return this._header;
			}
			set
			{
				if ((this._header != value))
				{
					this.OnheaderChanging(value);
					this.SendPropertyChanging();
					this._header = value;
					this.SendPropertyChanged("header");
					this.OnheaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageUrl", DbType="VarChar(300)")]
		public string imageUrl
		{
			get
			{
				return this._imageUrl;
			}
			set
			{
				if ((this._imageUrl != value))
				{
					this.OnimageUrlChanging(value);
					this.SendPropertyChanging();
					this._imageUrl = value;
					this.SendPropertyChanged("imageUrl");
					this.OnimageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="Date NOT NULL")]
		public System.DateTime publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCoreArticleData_tbOffer", Storage="_tbOffers", ThisKey="id", OtherKey="coreArticleDataId")]
		public EntitySet<tbOffer> tbOffers
		{
			get
			{
				return this._tbOffers;
			}
			set
			{
				this._tbOffers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbInformationCategory_tbCoreArticleData", Storage="_tbInformationCategory", ThisKey="categoryId", OtherKey="id", IsForeignKey=true)]
		public tbInformationCategory tbInformationCategory
		{
			get
			{
				return this._tbInformationCategory.Entity;
			}
			set
			{
				tbInformationCategory previousValue = this._tbInformationCategory.Entity;
				if (((previousValue != value) 
							|| (this._tbInformationCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbInformationCategory.Entity = null;
						previousValue.tbCoreArticleDatas.Remove(this);
					}
					this._tbInformationCategory.Entity = value;
					if ((value != null))
					{
						value.tbCoreArticleDatas.Add(this);
						this._categoryId = value.id;
					}
					else
					{
						this._categoryId = default(int);
					}
					this.SendPropertyChanged("tbInformationCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbOffers(tbOffer entity)
		{
			this.SendPropertyChanging();
			entity.tbCoreArticleData = this;
		}
		
		private void detach_tbOffers(tbOffer entity)
		{
			this.SendPropertyChanging();
			entity.tbCoreArticleData = null;
		}
	}
}
#pragma warning restore 1591
